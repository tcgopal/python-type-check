import json
import re

with open('invoice.json') as file:
    excel_details = json.load(file)

import datetime

def epoch_date(date_in):
    timestamp = date_in / 1000  # Convert milliseconds to seconds
    date = datetime.datetime.fromtimestamp(timestamp)
    formatted_date = date.strftime("%Y%m%d")
    return formatted_date

map = {
    "COMPANY_CODE": excel_details.customer.company.client_code,
    "SOURCE_ERP": "shipthis",  
    "SUPPLIER_COUNTRY_CODE_ENGLISH": "",
    "COMPANY_ROLE": "", 
    "INVOICE_TYPE": "Tax Invoice",
    "INVOICE_SUBTYPE": "Regular Domestic Supply",
    "TEMPLATE_CODE": "TAX IN",    
    "TRAN_BRANCH": "",
    "TRAN_SERVICE_BRANCH": "",
    "ERP_TRANSACTION_REF": "",
    "TRAN_DOC_TYPE": "IN",
    "TRAN_DOC_NO": excel_details.invoce_number, # Source ERPs Invoice number
    "TRAN_DOC_DATE": epoch_date(excel_details.invoice_date['$date']),
    "TRAN_LINE_NO": "1",
    "DATE_OF_SUPPLY": epoch_date(excel_details.invoice_date['$date']),
    "SUPPLY_FROM_DATE": "",
    "SUPPLY_END_DATE": "",
    "POSTING_DATE": epoch_date(excel_details.invoice_date['$date']),
    "TAX_CODE": excel_details.tax.name, 
    "PRODUCT_CODE": "",
    "ITEM_BUYER_IDENTIFICATION": "", 
    "ITEM_SELLER_IDENTIFICATION": "",
    "ITEM_STANDARD_IDENTIFY_TYPE": "", 
    "ITEM_STANDARD_IDENTIFIER_NO": "",
    "PRODUCT_DESCRIPTION_1_ENGLISH": "DEMURRAGE CHARGES", 
    "PRODUCT_DESCRIPTION_1_LANG02": "رسوم الإعفاء",
    "INV_CURRENCY_CODE": excel_details.invoice_currency.name,
    "VAT_CURRENCY_CODE": "SAR",
    "BANK_AC_HOLDER_NAME": "",  
    "BANK_AC_HOLDER_NAME_LANG02": "", 
    "COMPANY_BANK_NAME": "",  
    "COMPANY_BANK_NAME_LANG02": excel_details.bank_details.description,
    "COMPANY_BANK_ADDRESS": "",  
    "COMPANY_BANK_ADDRESS_LANG02": "", 
    "COMPANY_BANK_IBAN": "",  
    "COMPANY_SWIFT_CODE": "",  
    "COMPANY_BANK_ACCOUNT_NO": "",  
    "TRAN_CUST_CODE": excel_details.customer.company.client_code,  
    "CUST_NAME_WALKIN": "",
    "CUST_NAME_WALKIN_LANG02": "",  
    "CUST_VAT_TIN_WALKIN": "",  
    "CUST_VAT_REG_TYP_WALKIN": "",  
    "CUST_VAT_REG_TYP_WALKIN_LANG02": "", 
    "CUST_ADDITIONAL_ID_NO_WALKIN": "",
    "CUST_ADDL_ID_TYP_WALKIN": "",
    "CUST_ADDL_ID_TYP_WALKIN_LANG02": "",
    "CUST_BUILDING_NUMBER_WALKIN": "",
    "CUST_ADD_ADDRESS_NO_WALKIN": "",
    "CUST_ADD1_WALKIN": "",
    "CUST_ADD1_WALKIN_LANG02": "",
    "CUST_ADD2_WALKIN": "",
    "CUST_ADD2_WALKIN_LANG02": "",
    "CUST_DISTRICT_ENG_WALKIN": "",
    "CUST_DISTRICT_LANG02_WALKIN": "",
    "CUST_CITY_WALKIN": "",
    "CUST_CITY_WALKIN_LANG02": "",
    "CUST_PROVINCE_WALKIN": "",
    "CUST_PROVINCE_WALKIN_LANG02": "",
    "CUST_PINCODE_WALKIN": "",
    "CUST_COUNTRY_WALKIN": "",
    "CUST_COUNTRY_WALKIN_LANG02": "",
    "CUST_PRIMARY_EMAIL_ID_WALKIN": "",
    "TRAN_CUST_ACCNO": "",
    "TRAN_VEN_CODE": "",
    "TRAN_REMARKS": "",
    "TRAN_REMARKS_LANG02": "",
    "REASON_NOTES": "",
    "TRAN_ORG_DOC_NO": "",
    "TRAN_ORG_DOC_DATE": "",
    "TRAN_ORG_PRODUCT_CODE": "",
    "TRAN_ORG_TAXABLE_AFT_DISC": "",
    "TRAN_ORG_TAX_AMOUNT": "",
    "TRAN_ORG_DOC_VAL": "",
    "TRAN_UQC": "OTH",
    "TRAN_QUANTITY": "1",
    "TRAN_UNIT_PRICE": "",  # check
    "TRAN_TAX_CODE_CATEGORY": "Z",
    "TRAN_GROSS_AMOUNT": "", #check
    "TRAN_DISC1_REASON_CODE": "",
    "TRAN_DISC1_REASON_TEXT": "",
    "TRAN_DISC1_PERCENT": "",
    "TRAN_DISC1_AMOUNT": "",
    "TRAN_DISC2_REASON_CODE": "",
    "TRAN_DISC2_REASON_TEXT": "",
    "TRAN_DISC2_PERCENT": "",
    "TRAN_DISC2_AMOUNT": "",
    "TRAN_CHGS_REASON_CODE": "",
    "TRAN_CHGS_REASON_TEXT": "",
    "TRAN_CHGS_PERCENT": "",
    "TRAN_CHGS_AMOUNT": "",
    "TRAN_NET_AMOUNT": "",
    "TRAN_TAX_RATE": "",
    "TRAN_TAX_AMOUNT": "",
    "TRAN_NET_PLUS_TAX": "",
    "TRAN_VAT_EXEMPT_REASON_CODE": "", # check
    "TRAN_VAT_EXEMPT_REASON_TEXT": "Export of services",
    "INV_DISC1_TAX_CATEGORY": "",
    "INV_DISC1_PERCENT": "",
    "INV_DISC1_AMOUNT": "",
    "INV_DISC1_VAT_RATE": "",
    "INV_DISC1_VAT_AMOUNT": "",
    "INV_DISC1_REASON_CODE": "",
    "INV_DISC1_REASON_TEXT": "",
    "INV_DISC2_TAX_CATEGORY": "",
    "INV_DISC2_PERCENT": "",
    "INV_DISC2_AMOUNT": "",
    "INV_DISC2_VAT_RATE": "",
    "INV_DISC2_VAT_AMOUNT": "",
    "INV_DISC2_REASON_CODE": "",
    "INV_DISC2_REASON_TEXT": "",
    "INV_CHGS_TAX_CATEGORY": "",
    "INV_CHGS_PERCENT": "",
    "INV_CHGS_AMOUNT": "",
    "INV_CHGS_VAT_RATE": "",
    "INV_CHGS_VAT_AMOUNT": "",
    "INV_CHGS_REASON_CODE": "",
    "INV_CHGS_REASON_TEXT": "",
    "INV_NET_AMOUNT": "",
    "INV_TOTAL_TAX_AMOUNT": excel_details.invoice_tax_total,
    "ROUNDING_AMOUNT": "",
    "INV_TOTAL_AMOUNT": excel_details.invoice_total,
    "PREPAID_INV_NO": "",
    "ORG_PREPAID_ERP_REF_NO": "",
    "PREPAID_TAXABLE AMOUNT": "",
    "PREPAID_TAX_AMOUNT": "",
    "PREPAID_VAT_RATE": "",
    "PREPAID_VAT_CATEGORY": "",
    "INV_CUSTOMER_PAID_AMOUNT": excel_details.invoice_amount_paid,
    "INV_CUSTOMER_AMOUNT_DUE": excel_details.invoice_amount_due,
    "PAY_METHOD": "",
    "PAY_METHOD_LANG02": "",
    "PAY_TERMS": "",
    "PAY_TERMS_LANG02": "",
    "PURCHASE_ORDER_ID": "",
    "PO_DATE": "",
    "CONTRACT_ID": "",
    "ADDITIONAL_NOTES": "",
    "CURRENCY_EXCHNG_RATE": "",
    "TRAN_ORG_TAXABLE_AFT_DISC_FCY": "",
    "TRAN_ORG_TAX_AMOUNT_FCY": "",
    "TRAN_ORG_DOC_VAL_FCY": "",
    "TRAN_UNIT_PRICE_FCY": "",
    "TRAN_GROSS_AMOUNT_FCY": "",
    "TRAN_DISC1_AMOUNT_FCY": "",
    "TRAN_DISC2_AMOUNT_FCY": "",
    "TRAN_CHGS_AMOUNT_FCY": "",
    "TRAN_NET_AMOUNT_FCY": "",
    "TRAN_TAX_AMOUNT_FCY": "",
    "TRAN_NET_PLUS_TAX_FCY": "",
    "INV_DISC1_AMOUNT_FCY": "",
    "INV_DISC1_VAT_AMOUNT_FCY": "",
    "INV_DISC2_AMOUNT_FCY": "",
    "INV_DISC2_VAT_AMOUNT_FCY": "",
    "INV_CHGS_AMOUNT_FCY": "",
    "INV_CHGS_VAT_AMOUNT_FCY": "",
    "INV_NET_AMOUNT_FCY": "",
    "INV_TOTAL_TAX_AMOUNT_FCY": "",
    "INV_TOTAL_AMOUNT_FCY": excel_details.invoice_total,
    "PREPAID_TAXABLE AMOUNT_FCY": "",
    "PREPAID_TAX_AMOUNT_FCY": "",
    "ROUNDING_AMOUNT_FCY": "",
    "INV_CUSTOMER_PAID_AMOUNT_FCY": excel_details.invoice_amount_paid,
    "INV_CUSTOMER_AMOUNT_DUE_FCY": excel_details.invoice_amount_due,
    "Invoice_Counter": "",
    "UUID": "",
    "QR_CODE": ""
}


json_object = json.dumps(map, indent=4)
 
# Writing to sample.json
with open("output.json", "w") as outfile:
    outfile.write(json_object)